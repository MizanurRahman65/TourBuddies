{"version":3,"sources":["../src/generate.ts"],"names":["svgo","SVGO","plugins","convertShapeToPath","convertArcs","generateIconsSource","options","ICONS_PATH","src","buildPathsObject","data","outPath","path","join","dist","fontName","fs","outputFile","files","Promise","all","map","filepath","name","basename","svg","readFileSync","optimize","then","match","paths","s","slice","pathStrings","reactSource","source","generateReactIcons","outputReactFile","outputFileSync","reactsvgo","removeXMLNS","removeViewBox","removeEmptyAttrs","capitalizeEveryWord","str","replace","$0","$1","toUpperCase","outDistPath","d","i"],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport SVGO from 'svgo';\nimport { filterSvgFiles } from './utils';\nimport { SvgToFontOptions } from './';\n\nconst svgo = new SVGO({\n  plugins: [{\n    convertShapeToPath: { convertArcs: true },\n  }],\n});\n\n/**\n * Generate Icon SVG Path Source\n * <font-name>.json\n */\nexport async function generateIconsSource(options: SvgToFontOptions = {}){\n  const ICONS_PATH = filterSvgFiles(options.src)\n  const data = await buildPathsObject(ICONS_PATH);\n  const outPath = path.join(options.dist, `${options.fontName}.json`);\n  await fs.outputFile(outPath, `{${data}}`);\n  return outPath;\n}\n\n/**\n * Loads SVG file for each icon, extracts path strings `d=\"path-string\"`,\n * and constructs map of icon name to array of path strings.\n * @param {array} files\n */\nasync function buildPathsObject(files: string[]) {\n  return Promise.all(\n    files.map(async filepath => {\n      const name = path.basename(filepath, '.svg');\n      const svg = fs.readFileSync(filepath, 'utf-8');\n      const pathStrings = await svgo.optimize(svg, { path: filepath })\n        .then(({ data }) => data.match(/ d=\"[^\"]+\"/g) || [])\n        .then(paths => paths.map(s => s.slice(3)));\n      return `\"${name}\": [${pathStrings.join(',\\n')}]`;\n    }),\n  );\n}\n\nconst reactSource = (name: string, source: string) => `\nimport React from 'react';\n\nexport const ${name} = props => (\n  <svg viewBox=\"0 0 20 20\" {...props}>${source}</svg>\n);\n`;\n/**\n * Generate React Icon\n * <font-name>.json\n */\nexport async function generateReactIcons(options: SvgToFontOptions = {}) {\n  const ICONS_PATH = filterSvgFiles(options.src);\n  const data = await outputReactFile(ICONS_PATH, options);\n  const outPath = path.join(options.dist, 'react', 'index.js');\n  fs.outputFileSync(outPath, data.join('\\n'));\n  return outPath;\n}\n\nconst reactsvgo = new SVGO({\n  plugins: [\n    {\n      convertShapeToPath: { convertArcs: true }\n    },\n    { removeXMLNS: true },\n    // { removeDimensions: true, },\n    { removeViewBox: false },\n    { removeEmptyAttrs: true },\n    // { removeUnknownsAndDefaults: true },\n  ],\n});\n\nconst capitalizeEveryWord = (str: string) => str.replace(/-(\\w)/g, ($0, $1) => $1.toUpperCase()).replace(/^(\\w)/g, ($0, $1) => $1.toUpperCase());\n\nasync function outputReactFile(files: string[], options: SvgToFontOptions = {}) {\n  return Promise.all(\n    files.map(async filepath => {\n      const name = capitalizeEveryWord(path.basename(filepath, '.svg'));\n      const svg = fs.readFileSync(filepath, 'utf-8');\n      let pathStrings = await reactsvgo.optimize(svg, { path: filepath })\n        .then(({ data }) => data.match(/ d=\"[^\"]+\"/g) || [])\n        .then(paths => paths.map(s => s.slice(3)));\n        \n      const outDistPath = path.join(options.dist, 'react', `${name}.js`);\n      pathStrings = pathStrings.map((d, i) => `<path d=${d} fillRule=\"evenodd\" />`);\n      fs.outputFileSync(outDistPath, reactSource(name, pathStrings.join(',\\n')));\n      return `export * from './${name}';`;\n    }),\n  );\n}\n"]}