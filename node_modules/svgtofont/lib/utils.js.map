{"version":3,"sources":["../src/utils.ts"],"names":["UnicodeObj","startUnicode","createSVG","options","Promise","resolve","reject","fontStream","SVGIcons2SVGFont","svgicons2svgfont","writeFontStream","svgPath","_name","path","basename","glyph","fs","createReadStream","metadata","unicode","getIconUnicode","name","write","DIST_PATH","join","dist","fontName","pipe","createWriteStream","on","console","log","color","green","blue","err","filterSvgFiles","src","forEach","svg","end","svgFolderPath","files","readdirSync","svgArr","Error","i","extname","indexOf","push","String","fromCharCode","createTTF","svg2ttf","ttf","readFileSync","ttfBuf","Buffer","from","buffer","writeFile","createEOT","eot","createWOFF","woff","createWOFF2","woff2","createSvgSymbol","$","cheerio","load","fileName","file","svgNode","symbolNode","attr","classNamePrefix","append","contents","html","copyTemplate","inDir","outDir","_opts","vars","removeFiles","createdFiles","map","filePath","include","RegExp","test","filter","Boolean","length","output","process","cwd","all","createHTML","outPath","data","ejs","renderFile","str"],"mappings":"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","sourcesContent":["import SVGIcons2SVGFont, { Glyphs } from 'svgicons2svgfont';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport ejs from 'ejs';\nimport color from 'colors-cli';\nimport cheerio from 'cheerio';\nimport svg2ttf from 'svg2ttf';\nimport ttf2eot from 'ttf2eot';\nimport ttf2woff from 'ttf2woff';\nimport ttf2woff2 from 'ttf2woff2';\nimport copy from 'copy-template-dir';\nimport del from 'del';\nimport moveFile from 'move-file';\nimport { SvgToFontOptions } from './';\n\nlet UnicodeObj: Record<string, string> = {};\n/**\n * Unicode Private Use Area start.\n * https://en.wikipedia.org/wiki/Private_Use_Areas\n */\nlet startUnicode = 0xea01;\n\n/**\n * SVG to SVG font\n */\nexport function createSVG(options: SvgToFontOptions = {}): Promise<Record<string, string>> {\n  startUnicode = options.startUnicode\n  return new Promise((resolve, reject) => {\n    // init\n    const fontStream = new SVGIcons2SVGFont({\n      ...options.svgicons2svgfont\n    });\n\n    function writeFontStream(svgPath: string) {\n      // file name\n      let _name = path.basename(svgPath, \".svg\");\n      const glyph = fs.createReadStream(svgPath) as Glyphs;\n      glyph.metadata = { unicode: getIconUnicode(_name), name: _name };\n      fontStream.write(glyph);\n    }\n\n    const DIST_PATH = path.join(options.dist, options.fontName + \".svg\");\n    // Setting the font destination\n    fontStream.pipe(fs.createWriteStream(DIST_PATH))\n      .on(\"finish\", () => {\n        console.log(`${color.green('SUCCESS')} ${color.blue('SVG')} font successfully created!\\n  ╰┈▶ ${DIST_PATH}`);\n        resolve(UnicodeObj);\n      })\n      .on(\"error\", (err) => {\n        if (err) {\n          reject(err);\n        }\n      });\n    filterSvgFiles(options.src).forEach((svg: string) => {\n      if (typeof svg !== 'string') return false;\n      writeFontStream(svg);\n    });\n\n    // Do not forget to end the stream\n    fontStream.end();\n  });\n}\n\n/*\n * Filter svg files\n * @return {Array} svg files\n */\nexport function filterSvgFiles(svgFolderPath: string): string[] {\n  let files = fs.readdirSync(svgFolderPath, 'utf-8');\n  let svgArr = [];\n  if (!files) {\n    throw new Error(`Error! Svg folder is empty.${svgFolderPath}`);\n  }\n\n  for (let i in files) {\n    if (typeof files[i] !== 'string' || path.extname(files[i]) !== '.svg') continue;\n    if (!~svgArr.indexOf(files[i])) {\n      svgArr.push(path.join(svgFolderPath, files[i]));\n    }\n  }\n  return svgArr;\n}\n\n/*\n * Get icon unicode\n * @return {Array} unicode array\n */\nfunction getIconUnicode(name: string) {\n  let unicode = String.fromCharCode(startUnicode++);\n  UnicodeObj[name] = unicode;\n  return [unicode];\n}\n\n\n/**\n * SVG font to TTF\n */\nexport function createTTF(options: SvgToFontOptions = {}): Promise<Buffer> {\n  return new Promise((resolve, reject) => {\n    options.svg2ttf = options.svg2ttf || {};\n    const DIST_PATH = path.join(options.dist, options.fontName + \".ttf\");\n    let ttf = svg2ttf(fs.readFileSync(path.join(options.dist, options.fontName + \".svg\"), \"utf8\"), options.svg2ttf);\n    const ttfBuf = Buffer.from(ttf.buffer);\n    fs.writeFile(DIST_PATH, ttfBuf, (err: NodeJS.ErrnoException) => {\n      if (err) {\n        return reject(err);\n      }\n      console.log(`${color.green('SUCCESS')} ${color.blue('TTF')} font successfully created!\\n  ╰┈▶ ${DIST_PATH}`);\n      resolve(ttfBuf);\n    });\n  });\n};\n\n/**\n * TTF font to EOT\n */\nexport function createEOT(options: SvgToFontOptions = {}, ttf: Buffer) {\n  return new Promise((resolve, reject) => {\n    const DIST_PATH = path.join(options.dist, options.fontName + '.eot');\n    const eot = Buffer.from(ttf2eot(ttf).buffer);\n\n    fs.writeFile(DIST_PATH, eot, (err: NodeJS.ErrnoException) => {\n      if (err) {\n        return reject(err);\n      }\n      console.log(`${color.green('SUCCESS')} ${color.blue('EOT')} font successfully created!\\n  ╰┈▶ ${DIST_PATH}`);\n      resolve();\n    });\n  });\n};\n\n/**\n * TTF font to WOFF\n */\nexport function createWOFF(options: SvgToFontOptions = {}, ttf: Buffer) {\n  return new Promise((resolve, reject) => {\n    const DIST_PATH = path.join(options.dist, options.fontName + \".woff\");\n    const woff = Buffer.from(ttf2woff(ttf).buffer);\n    fs.writeFile(DIST_PATH, woff, (err) => {\n      if (err) {\n        return reject(err);\n      }\n      console.log(`${color.green('SUCCESS')} ${color.blue('WOFF')} font successfully created!\\n  ╰┈▶ ${DIST_PATH}`);\n      resolve();\n    });\n  });\n};\n\n/**\n * TTF font to WOFF2\n */\nexport function createWOFF2(options: SvgToFontOptions = {}, ttf: Buffer) {\n  return new Promise((resolve, reject) => {\n    const DIST_PATH = path.join(options.dist, options.fontName + \".woff2\");\n    const woff2 = Buffer.from(ttf2woff2(ttf).buffer);\n    fs.writeFile(DIST_PATH, woff2, (err) => {\n      if (err) {\n        return reject(err);\n      }\n      console.log(`${color.green('SUCCESS')} ${color.blue('WOFF2')} font successfully created!\\n  ╰┈▶ ${DIST_PATH}`);\n      resolve();\n    });\n  });\n};\n\n/**\n * Create SVG Symbol\n */\nexport function createSvgSymbol(options: SvgToFontOptions = {}) {\n  const DIST_PATH = path.join(options.dist, `${options.fontName}.symbol.svg`);\n  const $ = cheerio.load('<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"0\" height=\"0\" style=\"display:none;\"></svg>');\n  return new Promise((resolve, reject) => {\n    filterSvgFiles(options.src).forEach(svgPath => {\n      const fileName = path.basename(svgPath, path.extname(svgPath));\n      const file = fs.readFileSync(svgPath, \"utf8\");\n      const svgNode = $(file);\n      const symbolNode = $(\"<symbol></symbol>\");\n      symbolNode.attr(\"viewBox\", svgNode.attr(\"viewBox\"));\n      symbolNode.attr(\"id\", `${options.classNamePrefix}-${fileName}`);\n      symbolNode.append(svgNode.contents());\n      $('svg').append(symbolNode);\n    });\n\n    fs.writeFile(DIST_PATH, $.html(\"svg\"), (err) => {\n      if (err) {\n        return reject(err);\n      }\n      console.log(`${color.green('SUCCESS')} ${color.blue('Svg Symbol')} font successfully created!\\n  ╰┈▶ ${DIST_PATH}`);\n      resolve();\n    });\n  });\n};\n\nexport type CSSOptions = {\n  /**\n   * Output the css file to the specified directory\n   */\n  output?: string;\n  /**\n   * Which files are exported.\n   */\n  include?: RegExp;\n  /**\n   * Setting font size.\n   */\n  fontSize?: string;\n}\n\n/**\n * Copy template files\n */\nexport function copyTemplate(inDir: string, outDir: string, { _opts, ...vars }: Record<string, any> & { _opts: CSSOptions}) {\n  const removeFiles: Array<string> = [];\n  return new Promise((resolve, reject) => {\n    copy(inDir, outDir, vars, async (err, createdFiles) => {\n      if (err) reject(err);\n      createdFiles = createdFiles.map(filePath => {\n        if (_opts.include && (new RegExp(_opts.include)).test(filePath) || !_opts.include) {\n          return filePath;\n        } else {\n          removeFiles.push(filePath);\n        }\n      }).filter(Boolean);\n      if (removeFiles.length > 0) {\n        await del([...removeFiles]);\n      }\n      if (_opts.output) {\n        const output = path.join(process.cwd(), _opts.output);\n        await Promise.all(createdFiles.map(async (file) => {\n          await moveFile(file, path.join(output, path.basename(file)));\n          return null;\n        }));\n      }\n      createdFiles.forEach(filePath => console.log(`${color.green('SUCCESS')} Created ${filePath} `));\n      resolve(createdFiles);\n    })\n  });\n};\n\n/**\n * Create HTML\n */\nexport function createHTML(outPath: string,data: ejs.Data, options?: ejs.Options): Promise<string> {\n  return new Promise((resolve, reject) => {\n    ejs.renderFile(outPath, data, options, (err, str) => {\n      if (err) reject(err);\n      resolve(str);\n    });\n  });\n};\n\n"]}