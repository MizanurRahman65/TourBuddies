{"version":3,"sources":["../src/index.ts"],"names":["options","pkgPath","path","join","process","cwd","fs","pathExistsSync","pkg","require","svgtofont","dist","src","startUnicode","svg2ttf","emptyDist","fontName","svgicons2svgfont","classNamePrefix","fontSize","css","website","emptyDir","ensureDir","unicodeObject","cssString","cssToVars","cssIconHtml","unicodeHtml","symbolHtml","Object","keys","forEach","name","_code","push","charCodeAt","toString","ttf","console","log","resolve","__dirname","fontname","timestamp","Date","getTime","prefix","_opts","pageName","fontClassPath","unicodePath","symbolPath","indexName","includes","index","indexOf","_path","template","tempData","meta","links","corners","description","footerInfo","_type","_link","_IconHtml","_title","title","logo","extname","readFileSync","favicon","classHtmlStr","outputFileSync","htmlMinifier","minify","collapseWhitespace","minifyCSS","color","green","unicodeHtmlStr","symbolHtmlStr","outSVGPath","outPath","outSVGReact"],"mappings":"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","sourcesContent":["/// <reference types=\"./types\" />\n\nimport path from 'path';\nimport fs from 'fs-extra';\nimport image2uri from 'image2uri';\nimport htmlMinifier from 'html-minifier';\nimport { SVGIcons2SVGFontOptions } from 'svgicons2svgfont';\nimport color from 'colors-cli';\nimport { generateIconsSource, generateReactIcons } from './generate';\nimport { createSVG, createTTF, createEOT, createWOFF, createWOFF2, createSvgSymbol, copyTemplate, CSSOptions, createHTML } from './utils';\n\nexport type SvgToFontOptions = {\n  /**\n   * The output directory.\n   * @default fonts\n   * @example\n   * ```\n   * path.join(process.cwd(), 'fonts')\n   * ```\n   */\n  dist?: string;\n  /**\n   * svg path\n   * @default svg\n   * @example\n   * ```\n   * path.join(process.cwd(), 'svg')\n   * ```\n   */\n  src?: string;\n  /**\n   * The font family name you want.\n   * @default iconfont\n   */\n  fontName?: string;\n  /**\n   * Create CSS/LESS/Scss/Styl files, default `true`.\n   */\n  css?: boolean | CSSOptions;\n  /**\n   * Output `./dist/react/`, SVG generates `react` components.\n   */\n  outSVGReact?: boolean;\n  /**\n   * Output `./dist/svgtofont.json`, The content is as follows:\n   * @example\n   * ```js\n   * {\n   *   \"adobe\": [\"M14.868 3H23v19L14.868 3zM1 3h8.8.447z....\"],\n   *   \"git\": [\"M2.6 10.59L8.38 4.8l1.69 1.7c-.24c-.6.34-1 .99-1...\"],\n   *   \"stylelint\": [\"M129.74 243.648c28-100.5.816c2.65...\"]\n   * }\n   * ```\n   */\n  outSVGPath?: boolean;\n  /**\n   * This is the setting for [svgicons2svgfont](https://github.com/nfroidure/svgicons2svgfont/tree/dd713bea4f97afa59f7dba6a21ff7f22db565bcf#api)\n   */\n  svgicons2svgfont?: SVGIcons2SVGFontOptions;\n  /**\n   * Create font class name prefix, default value font name.\n   * @default fontName\n   */\n  classNamePrefix?: SvgToFontOptions['fontName'];\n  /**\n   * unicode start number\n   * @default 10000\n   */\n  startUnicode?: number;\n  /**\n   * Clear output directory contents\n   * @default false\n   */\n  emptyDist?: boolean;\n  /**\n   * This is the setting for [svg2ttf](https://github.com/fontello/svg2ttf/tree/c33a126920f46b030e8ce960cc7a0e38a6946bbc#svg2ttfsvgfontstring-options---buf)\n   */\n  svg2ttf?: unknown;\n  website?: {\n    /**\n     * Add a Github corner to your website\n     * @like https://github.com/uiwjs/react-github-corners\n     */\n    corners?: {\n      /**\n       * @example `https://github.com/jaywcjlove/svgtofont`\n       */\n      url?: string,\n      /**\n       * @default 60\n       */\n      width?: number,\n      /**\n       * @default 60\n       */\n      height?: number,\n      /**\n       * @default #151513\n       */\n      bgColor?: '#dc3545'\n    },\n    /**\n     * @default unicode\n     */\n    index?: 'font-class' | 'unicode' | 'symbol';\n    /**\n     * website title\n     */\n    title?: string;\n    /**\n     * @example\n     * ```js\n     * path.resolve(rootPath, \"favicon.png\")\n     * ```\n     */\n    favicon?: string;\n    /**\n     * Must be a .svg format image.\n     * @example\n     * ```js\n     * path.resolve(rootPath, \"svg\", \"git.svg\")\n     * ```\n     */\n    logo?: string,\n    version?: string,\n    meta?: {\n      description?: string;\n      keywords?: string;\n    },\n    description?: string;\n    template?: string;\n    footerInfo?: string;\n    links: Array<{\n      title: string;\n      url: string;\n    }>;\n  };\n}\n\nexport default async (options: SvgToFontOptions = {}) => {\n  const pkgPath = path.join(process.cwd(), 'package.json');\n  if (fs.pathExistsSync(pkgPath)) {\n    const pkg = require(pkgPath);\n    if (pkg.svgtofont) {\n      options = { ...options, ...pkg.svgtofont }\n    }\n  }\n\n  options.dist = options.dist || path.join(process.cwd(), 'fonts');\n  options.src = options.src || path.join(process.cwd(), 'svg');\n  options.startUnicode = options.startUnicode || 0xea01;\n  options.svg2ttf = options.svg2ttf || {};\n  options.emptyDist = options.emptyDist;\n  options.fontName = options.fontName || 'iconfont';\n  options.svgicons2svgfont = options.svgicons2svgfont || {};\n  options.svgicons2svgfont.fontName = options.fontName;\n  options.classNamePrefix = options.classNamePrefix || options.fontName;\n  const fontSize = options.css && typeof options.css !== 'boolean' && options.css.fontSize ? options.css.fontSize : '16px';\n  // If you generate a font you need to generate a style.\n  if (options.website) options.css = true;\n\n  try {\n    if (options.emptyDist) {\n      await fs.emptyDir(options.dist);\n    }\n    // Ensures that the directory exists.\n    await fs.ensureDir(options.dist);\n    const unicodeObject = await createSVG(options);\n\n    let cssString: string[] = [];\n    let cssToVars: string[] = [];\n    let cssIconHtml: string[] = [];\n    let unicodeHtml: string[] = [];\n    let symbolHtml: string[] = [];\n    Object.keys(unicodeObject).forEach(name => {\n      let _code = unicodeObject[name];\n      cssIconHtml.push(`<li class=\"class-icon\"><i class=\"${options.classNamePrefix}-${name}\"></i><p class=\"name\">${name}</p></li>`);\n      unicodeHtml.push(`<li class=\"unicode-icon\"><span class=\"iconfont\">${_code}</span><h4>${name}</h4><span class=\"unicode\">&amp;#${_code.charCodeAt(0)};</span></li>`);\n      symbolHtml.push(`\n        <li class=\"symbol\">\n          <svg class=\"icon\" aria-hidden=\"true\">\n            <use xlink:href=\"${options.fontName}.symbol.svg#${options.classNamePrefix}-${name}\"></use>\n          </svg>\n          <h4>${options.classNamePrefix}-${name}</h4>\n        </li>\n      `);\n      cssString.push(`.${options.classNamePrefix}-${name}:before { content: \"\\\\${_code.charCodeAt(0).toString(16)}\"; }\\n`);\n      cssToVars.push(`$${options.classNamePrefix}-${name}: \"\\\\${_code.charCodeAt(0).toString(16)}\";\\n`);\n    });\n    const ttf = await createTTF(options);\n    await createEOT(options, ttf);\n    await createWOFF(options, ttf);\n    await createWOFF2(options, ttf);\n    await createSvgSymbol(options);\n\n    if (options.css) {\n      console.log('fontSize::', fontSize)\n      await copyTemplate(path.resolve(__dirname, 'styles'), options.dist, {\n        fontname: options.fontName,\n        cssString: cssString.join(''),\n        cssToVars: cssToVars.join(''),\n        fontSize: fontSize,\n        timestamp: new Date().getTime(),\n        prefix: options.classNamePrefix || options.fontName,\n        _opts: typeof options.css === 'boolean' ? {} : {...options.css}\n      });\n    }\n\n\n    if (options.website) {\n      const pageName = ['font-class', 'unicode', 'symbol'];\n      let fontClassPath = path.join(options.dist, 'index.html');\n      let unicodePath = path.join(options.dist, 'unicode.html');\n      let symbolPath = path.join(options.dist, 'symbol.html');\n      // setting default home page.\n      const indexName = pageName.includes(options.website.index) ? pageName.indexOf(options.website.index) : 0;\n      pageName.forEach((name, index) => {\n        const _path = path.join(options.dist, indexName === index ? 'index.html' : `${name}.html`);\n        if (name === 'font-class') fontClassPath = _path;\n        if (name === 'unicode') unicodePath = _path;\n        if (name === 'symbol') symbolPath = _path;\n      });\n      // default template\n      options.website.template = options.website.template || path.join(__dirname, 'website', 'index.ejs');\n      // template data\n      const tempData: SvgToFontOptions['website'] & {\n        fontname: string;\n        classNamePrefix: string;\n        _type: string;\n        _link: string;\n        _IconHtml: string;\n        _title: string;\n      } = {\n        meta: null,\n        links: null,\n        corners: null,\n        description: null,\n        footerInfo: null,\n        ...options.website,\n        fontname: options.fontName,\n        classNamePrefix: options.classNamePrefix,\n        _type: 'font-class',\n        _link: `${options.fontName}.css`,\n        _IconHtml: cssIconHtml.join(''),\n        _title: options.website.title || options.fontName\n      };\n      // website logo\n      if (options.website.logo && fs.pathExistsSync(options.website.logo) && path.extname(options.website.logo) === '.svg') {\n        tempData.logo = fs.readFileSync(options.website.logo).toString();\n      }\n      // website favicon\n      if (options.website.favicon && fs.pathExistsSync(options.website.favicon)) {\n        tempData.favicon = image2uri(options.website.favicon);\n      } else {\n        tempData.favicon = '';\n      }\n      const classHtmlStr = await createHTML(options.website.template, tempData);\n      fs.outputFileSync(\n        fontClassPath,\n        htmlMinifier.minify(classHtmlStr as string, { collapseWhitespace: true, minifyCSS: true })\n      );\n      console.log(`${color.green('SUCCESS')} Created ${fontClassPath} `);\n\n      tempData._IconHtml = unicodeHtml.join('');\n      tempData._type = 'unicode';\n      const unicodeHtmlStr = await createHTML(options.website.template, tempData);\n      fs.outputFileSync(\n        unicodePath,\n        htmlMinifier.minify(unicodeHtmlStr, { collapseWhitespace: true, minifyCSS: true })\n      );\n      console.log(`${color.green('SUCCESS')} Created ${unicodePath} `);\n\n      tempData._IconHtml = symbolHtml.join('');\n      tempData._type = 'symbol';\n      const symbolHtmlStr = await createHTML(options.website.template, tempData);\n      fs.outputFileSync(\n        symbolPath,\n        htmlMinifier.minify(symbolHtmlStr, { collapseWhitespace: true, minifyCSS: true })\n      );\n      console.log(`${color.green('SUCCESS')} Created ${unicodePath} `);\n    }\n\n\n    if (options.outSVGPath) {\n      const outPath = await generateIconsSource(options);\n      console.log(`${color.green('SUCCESS')} Created ${outPath} `);\n    }\n    if (options.outSVGReact) {\n      const outPath = await generateReactIcons(options);\n      console.log(`${color.green('SUCCESS')} Created React Components. `);\n    }\n\n  } catch (error) {\n    console.log('SvgToFont:ERR:', error);\n  }\n}\n"]}