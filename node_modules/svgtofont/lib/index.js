"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _path2 = _interopRequireDefault(require("path"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _image2uri = _interopRequireDefault(require("image2uri"));

var _htmlMinifier = _interopRequireDefault(require("html-minifier"));

var _colorsCli = _interopRequireDefault(require("colors-cli"));

var _generate = require("./generate");

var _utils = require("./utils");

/// <reference types="./types" />
var _default = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    var options,
        pkgPath,
        pkg,
        fontSize,
        unicodeObject,
        cssString,
        cssToVars,
        cssIconHtml,
        unicodeHtml,
        symbolHtml,
        ttf,
        pageName,
        fontClassPath,
        unicodePath,
        symbolPath,
        indexName,
        tempData,
        classHtmlStr,
        unicodeHtmlStr,
        symbolHtmlStr,
        outPath,
        _outPath,
        _args = arguments;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
            pkgPath = _path2["default"].join(process.cwd(), 'package.json');

            if (_fsExtra["default"].pathExistsSync(pkgPath)) {
              pkg = require(pkgPath);

              if (pkg.svgtofont) {
                options = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, options), pkg.svgtofont);
              }
            }

            options.dist = options.dist || _path2["default"].join(process.cwd(), 'fonts');
            options.src = options.src || _path2["default"].join(process.cwd(), 'svg');
            options.startUnicode = options.startUnicode || 0xea01;
            options.svg2ttf = options.svg2ttf || {};
            options.emptyDist = options.emptyDist;
            options.fontName = options.fontName || 'iconfont';
            options.svgicons2svgfont = options.svgicons2svgfont || {};
            options.svgicons2svgfont.fontName = options.fontName;
            options.classNamePrefix = options.classNamePrefix || options.fontName;
            fontSize = options.css && typeof options.css !== 'boolean' && options.css.fontSize ? options.css.fontSize : '16px'; // If you generate a font you need to generate a style.

            if (options.website) options.css = true;
            _context.prev = 14;

            if (!options.emptyDist) {
              _context.next = 18;
              break;
            }

            _context.next = 18;
            return _fsExtra["default"].emptyDir(options.dist);

          case 18:
            _context.next = 20;
            return _fsExtra["default"].ensureDir(options.dist);

          case 20:
            _context.next = 22;
            return (0, _utils.createSVG)(options);

          case 22:
            unicodeObject = _context.sent;
            cssString = [];
            cssToVars = [];
            cssIconHtml = [];
            unicodeHtml = [];
            symbolHtml = [];
            Object.keys(unicodeObject).forEach(function (name) {
              var _code = unicodeObject[name];
              cssIconHtml.push("<li class=\"class-icon\"><i class=\"".concat(options.classNamePrefix, "-").concat(name, "\"></i><p class=\"name\">").concat(name, "</p></li>"));
              unicodeHtml.push("<li class=\"unicode-icon\"><span class=\"iconfont\">".concat(_code, "</span><h4>").concat(name, "</h4><span class=\"unicode\">&amp;#").concat(_code.charCodeAt(0), ";</span></li>"));
              symbolHtml.push("\n        <li class=\"symbol\">\n          <svg class=\"icon\" aria-hidden=\"true\">\n            <use xlink:href=\"".concat(options.fontName, ".symbol.svg#").concat(options.classNamePrefix, "-").concat(name, "\"></use>\n          </svg>\n          <h4>").concat(options.classNamePrefix, "-").concat(name, "</h4>\n        </li>\n      "));
              cssString.push(".".concat(options.classNamePrefix, "-").concat(name, ":before { content: \"\\").concat(_code.charCodeAt(0).toString(16), "\"; }\n"));
              cssToVars.push("$".concat(options.classNamePrefix, "-").concat(name, ": \"\\").concat(_code.charCodeAt(0).toString(16), "\";\n"));
            });
            _context.next = 31;
            return (0, _utils.createTTF)(options);

          case 31:
            ttf = _context.sent;
            _context.next = 34;
            return (0, _utils.createEOT)(options, ttf);

          case 34:
            _context.next = 36;
            return (0, _utils.createWOFF)(options, ttf);

          case 36:
            _context.next = 38;
            return (0, _utils.createWOFF2)(options, ttf);

          case 38:
            _context.next = 40;
            return (0, _utils.createSvgSymbol)(options);

          case 40:
            if (!options.css) {
              _context.next = 44;
              break;
            }

            console.log('fontSize::', fontSize);
            _context.next = 44;
            return (0, _utils.copyTemplate)(_path2["default"].resolve(__dirname, 'styles'), options.dist, {
              fontname: options.fontName,
              cssString: cssString.join(''),
              cssToVars: cssToVars.join(''),
              fontSize: fontSize,
              timestamp: new Date().getTime(),
              prefix: options.classNamePrefix || options.fontName,
              _opts: typeof options.css === 'boolean' ? {} : (0, _objectSpread2["default"])({}, options.css)
            });

          case 44:
            if (!options.website) {
              _context.next = 74;
              break;
            }

            pageName = ['font-class', 'unicode', 'symbol'];
            fontClassPath = _path2["default"].join(options.dist, 'index.html');
            unicodePath = _path2["default"].join(options.dist, 'unicode.html');
            symbolPath = _path2["default"].join(options.dist, 'symbol.html'); // setting default home page.

            indexName = pageName.includes(options.website.index) ? pageName.indexOf(options.website.index) : 0;
            pageName.forEach(function (name, index) {
              var _path = _path2["default"].join(options.dist, indexName === index ? 'index.html' : "".concat(name, ".html"));

              if (name === 'font-class') fontClassPath = _path;
              if (name === 'unicode') unicodePath = _path;
              if (name === 'symbol') symbolPath = _path;
            }); // default template

            options.website.template = options.website.template || _path2["default"].join(__dirname, 'website', 'index.ejs'); // template data

            tempData = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({
              meta: null,
              links: null,
              corners: null,
              description: null,
              footerInfo: null
            }, options.website), {}, {
              fontname: options.fontName,
              classNamePrefix: options.classNamePrefix,
              _type: 'font-class',
              _link: "".concat(options.fontName, ".css"),
              _IconHtml: cssIconHtml.join(''),
              _title: options.website.title || options.fontName
            }); // website logo

            if (options.website.logo && _fsExtra["default"].pathExistsSync(options.website.logo) && _path2["default"].extname(options.website.logo) === '.svg') {
              tempData.logo = _fsExtra["default"].readFileSync(options.website.logo).toString();
            } // website favicon


            if (options.website.favicon && _fsExtra["default"].pathExistsSync(options.website.favicon)) {
              tempData.favicon = (0, _image2uri["default"])(options.website.favicon);
            } else {
              tempData.favicon = '';
            }

            _context.next = 57;
            return (0, _utils.createHTML)(options.website.template, tempData);

          case 57:
            classHtmlStr = _context.sent;

            _fsExtra["default"].outputFileSync(fontClassPath, _htmlMinifier["default"].minify(classHtmlStr, {
              collapseWhitespace: true,
              minifyCSS: true
            }));

            console.log("".concat(_colorsCli["default"].green('SUCCESS'), " Created ").concat(fontClassPath, " "));
            tempData._IconHtml = unicodeHtml.join('');
            tempData._type = 'unicode';
            _context.next = 64;
            return (0, _utils.createHTML)(options.website.template, tempData);

          case 64:
            unicodeHtmlStr = _context.sent;

            _fsExtra["default"].outputFileSync(unicodePath, _htmlMinifier["default"].minify(unicodeHtmlStr, {
              collapseWhitespace: true,
              minifyCSS: true
            }));

            console.log("".concat(_colorsCli["default"].green('SUCCESS'), " Created ").concat(unicodePath, " "));
            tempData._IconHtml = symbolHtml.join('');
            tempData._type = 'symbol';
            _context.next = 71;
            return (0, _utils.createHTML)(options.website.template, tempData);

          case 71:
            symbolHtmlStr = _context.sent;

            _fsExtra["default"].outputFileSync(symbolPath, _htmlMinifier["default"].minify(symbolHtmlStr, {
              collapseWhitespace: true,
              minifyCSS: true
            }));

            console.log("".concat(_colorsCli["default"].green('SUCCESS'), " Created ").concat(unicodePath, " "));

          case 74:
            if (!options.outSVGPath) {
              _context.next = 79;
              break;
            }

            _context.next = 77;
            return (0, _generate.generateIconsSource)(options);

          case 77:
            outPath = _context.sent;
            console.log("".concat(_colorsCli["default"].green('SUCCESS'), " Created ").concat(outPath, " "));

          case 79:
            if (!options.outSVGReact) {
              _context.next = 84;
              break;
            }

            _context.next = 82;
            return (0, _generate.generateReactIcons)(options);

          case 82:
            _outPath = _context.sent;
            console.log("".concat(_colorsCli["default"].green('SUCCESS'), " Created React Components. "));

          case 84:
            _context.next = 89;
            break;

          case 86:
            _context.prev = 86;
            _context.t0 = _context["catch"](14);
            console.log('SvgToFont:ERR:', _context.t0);

          case 89:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[14, 86]]);
  }));

  return function () {
    return _ref.apply(this, arguments);
  };
}();

exports["default"] = _default;
module.exports = exports.default; 
//# sourceMappingURL=index.js.map