"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSVG = createSVG;
exports.filterSvgFiles = filterSvgFiles;
exports.createTTF = createTTF;
exports.createEOT = createEOT;
exports.createWOFF = createWOFF;
exports.createWOFF2 = createWOFF2;
exports.createSvgSymbol = createSvgSymbol;
exports.copyTemplate = copyTemplate;
exports.createHTML = createHTML;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _svgicons2svgfont = _interopRequireDefault(require("svgicons2svgfont"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _ejs = _interopRequireDefault(require("ejs"));

var _colorsCli = _interopRequireDefault(require("colors-cli"));

var _cheerio = _interopRequireDefault(require("cheerio"));

var _svg2ttf = _interopRequireDefault(require("svg2ttf"));

var _ttf2eot = _interopRequireDefault(require("ttf2eot"));

var _ttf2woff = _interopRequireDefault(require("ttf2woff"));

var _ttf2woff2 = _interopRequireDefault(require("ttf2woff2"));

var _copyTemplateDir = _interopRequireDefault(require("copy-template-dir"));

var _del = _interopRequireDefault(require("del"));

var _moveFile = _interopRequireDefault(require("move-file"));

var UnicodeObj = {};
/**
 * Unicode Private Use Area start.
 * https://en.wikipedia.org/wiki/Private_Use_Areas
 */

var startUnicode = 0xea01;
/**
 * SVG to SVG font
 */

function createSVG() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  startUnicode = options.startUnicode;
  return new Promise(function (resolve, reject) {
    // init
    var fontStream = new _svgicons2svgfont["default"]((0, _objectSpread2["default"])({}, options.svgicons2svgfont));

    function writeFontStream(svgPath) {
      // file name
      var _name = _path["default"].basename(svgPath, ".svg");

      var glyph = _fsExtra["default"].createReadStream(svgPath);

      glyph.metadata = {
        unicode: getIconUnicode(_name),
        name: _name
      };
      fontStream.write(glyph);
    }

    var DIST_PATH = _path["default"].join(options.dist, options.fontName + ".svg"); // Setting the font destination


    fontStream.pipe(_fsExtra["default"].createWriteStream(DIST_PATH)).on("finish", function () {
      console.log("".concat(_colorsCli["default"].green('SUCCESS'), " ").concat(_colorsCli["default"].blue('SVG'), " font successfully created!\n  \u2570\u2508\u25B6 ").concat(DIST_PATH));
      resolve(UnicodeObj);
    }).on("error", function (err) {
      if (err) {
        reject(err);
      }
    });
    filterSvgFiles(options.src).forEach(function (svg) {
      if (typeof svg !== 'string') return false;
      writeFontStream(svg);
    }); // Do not forget to end the stream

    fontStream.end();
  });
}
/*
 * Filter svg files
 * @return {Array} svg files
 */


function filterSvgFiles(svgFolderPath) {
  var files = _fsExtra["default"].readdirSync(svgFolderPath, 'utf-8');

  var svgArr = [];

  if (!files) {
    throw new Error("Error! Svg folder is empty.".concat(svgFolderPath));
  }

  for (var i in files) {
    if (typeof files[i] !== 'string' || _path["default"].extname(files[i]) !== '.svg') continue;

    if (!~svgArr.indexOf(files[i])) {
      svgArr.push(_path["default"].join(svgFolderPath, files[i]));
    }
  }

  return svgArr;
}
/*
 * Get icon unicode
 * @return {Array} unicode array
 */


function getIconUnicode(name) {
  var unicode = String.fromCharCode(startUnicode++);
  UnicodeObj[name] = unicode;
  return [unicode];
}
/**
 * SVG font to TTF
 */


function createTTF() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return new Promise(function (resolve, reject) {
    options.svg2ttf = options.svg2ttf || {};

    var DIST_PATH = _path["default"].join(options.dist, options.fontName + ".ttf");

    var ttf = (0, _svg2ttf["default"])(_fsExtra["default"].readFileSync(_path["default"].join(options.dist, options.fontName + ".svg"), "utf8"), options.svg2ttf);
    var ttfBuf = Buffer.from(ttf.buffer);

    _fsExtra["default"].writeFile(DIST_PATH, ttfBuf, function (err) {
      if (err) {
        return reject(err);
      }

      console.log("".concat(_colorsCli["default"].green('SUCCESS'), " ").concat(_colorsCli["default"].blue('TTF'), " font successfully created!\n  \u2570\u2508\u25B6 ").concat(DIST_PATH));
      resolve(ttfBuf);
    });
  });
}

;
/**
 * TTF font to EOT
 */

function createEOT() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var ttf = arguments.length > 1 ? arguments[1] : undefined;
  return new Promise(function (resolve, reject) {
    var DIST_PATH = _path["default"].join(options.dist, options.fontName + '.eot');

    var eot = Buffer.from((0, _ttf2eot["default"])(ttf).buffer);

    _fsExtra["default"].writeFile(DIST_PATH, eot, function (err) {
      if (err) {
        return reject(err);
      }

      console.log("".concat(_colorsCli["default"].green('SUCCESS'), " ").concat(_colorsCli["default"].blue('EOT'), " font successfully created!\n  \u2570\u2508\u25B6 ").concat(DIST_PATH));
      resolve();
    });
  });
}

;
/**
 * TTF font to WOFF
 */

function createWOFF() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var ttf = arguments.length > 1 ? arguments[1] : undefined;
  return new Promise(function (resolve, reject) {
    var DIST_PATH = _path["default"].join(options.dist, options.fontName + ".woff");

    var woff = Buffer.from((0, _ttf2woff["default"])(ttf).buffer);

    _fsExtra["default"].writeFile(DIST_PATH, woff, function (err) {
      if (err) {
        return reject(err);
      }

      console.log("".concat(_colorsCli["default"].green('SUCCESS'), " ").concat(_colorsCli["default"].blue('WOFF'), " font successfully created!\n  \u2570\u2508\u25B6 ").concat(DIST_PATH));
      resolve();
    });
  });
}

;
/**
 * TTF font to WOFF2
 */

function createWOFF2() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var ttf = arguments.length > 1 ? arguments[1] : undefined;
  return new Promise(function (resolve, reject) {
    var DIST_PATH = _path["default"].join(options.dist, options.fontName + ".woff2");

    var woff2 = Buffer.from((0, _ttf2woff2["default"])(ttf).buffer);

    _fsExtra["default"].writeFile(DIST_PATH, woff2, function (err) {
      if (err) {
        return reject(err);
      }

      console.log("".concat(_colorsCli["default"].green('SUCCESS'), " ").concat(_colorsCli["default"].blue('WOFF2'), " font successfully created!\n  \u2570\u2508\u25B6 ").concat(DIST_PATH));
      resolve();
    });
  });
}

;
/**
 * Create SVG Symbol
 */

function createSvgSymbol() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var DIST_PATH = _path["default"].join(options.dist, "".concat(options.fontName, ".symbol.svg"));

  var $ = _cheerio["default"].load('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="0" height="0" style="display:none;"></svg>');

  return new Promise(function (resolve, reject) {
    filterSvgFiles(options.src).forEach(function (svgPath) {
      var fileName = _path["default"].basename(svgPath, _path["default"].extname(svgPath));

      var file = _fsExtra["default"].readFileSync(svgPath, "utf8");

      var svgNode = $(file);
      var symbolNode = $("<symbol></symbol>");
      symbolNode.attr("viewBox", svgNode.attr("viewBox"));
      symbolNode.attr("id", "".concat(options.classNamePrefix, "-").concat(fileName));
      symbolNode.append(svgNode.contents());
      $('svg').append(symbolNode);
    });

    _fsExtra["default"].writeFile(DIST_PATH, $.html("svg"), function (err) {
      if (err) {
        return reject(err);
      }

      console.log("".concat(_colorsCli["default"].green('SUCCESS'), " ").concat(_colorsCli["default"].blue('Svg Symbol'), " font successfully created!\n  \u2570\u2508\u25B6 ").concat(DIST_PATH));
      resolve();
    });
  });
}

;

/**
 * Copy template files
 */
function copyTemplate(inDir, outDir, _ref) {
  var _opts = _ref._opts,
      vars = (0, _objectWithoutProperties2["default"])(_ref, ["_opts"]);
  var removeFiles = [];
  return new Promise(function (resolve, reject) {
    (0, _copyTemplateDir["default"])(inDir, outDir, vars, /*#__PURE__*/function () {
      var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(err, createdFiles) {
        var output;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (err) reject(err);
                createdFiles = createdFiles.map(function (filePath) {
                  if (_opts.include && new RegExp(_opts.include).test(filePath) || !_opts.include) {
                    return filePath;
                  } else {
                    removeFiles.push(filePath);
                  }
                }).filter(Boolean);

                if (!(removeFiles.length > 0)) {
                  _context2.next = 5;
                  break;
                }

                _context2.next = 5;
                return (0, _del["default"])([].concat(removeFiles));

              case 5:
                if (!_opts.output) {
                  _context2.next = 9;
                  break;
                }

                output = _path["default"].join(process.cwd(), _opts.output);
                _context2.next = 9;
                return Promise.all(createdFiles.map( /*#__PURE__*/function () {
                  var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(file) {
                    return _regenerator["default"].wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return (0, _moveFile["default"])(file, _path["default"].join(output, _path["default"].basename(file)));

                          case 2:
                            return _context.abrupt("return", null);

                          case 3:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }));

                  return function (_x3) {
                    return _ref3.apply(this, arguments);
                  };
                }()));

              case 9:
                createdFiles.forEach(function (filePath) {
                  return console.log("".concat(_colorsCli["default"].green('SUCCESS'), " Created ").concat(filePath, " "));
                });
                resolve(createdFiles);

              case 11:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x, _x2) {
        return _ref2.apply(this, arguments);
      };
    }());
  });
}

;
/**
 * Create HTML
 */

function createHTML(outPath, data, options) {
  return new Promise(function (resolve, reject) {
    _ejs["default"].renderFile(outPath, data, options, function (err, str) {
      if (err) reject(err);
      resolve(str);
    });
  });
}

; 
//# sourceMappingURL=utils.js.map