"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateIconsSource = generateIconsSource;
exports.generateReactIcons = generateReactIcons;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _svgo = _interopRequireDefault(require("svgo"));

var _utils = require("./utils");

var svgo = new _svgo["default"]({
  plugins: [{
    convertShapeToPath: {
      convertArcs: true
    }
  }]
});
/**
 * Generate Icon SVG Path Source
 * <font-name>.json
 */

function generateIconsSource() {
  return _generateIconsSource.apply(this, arguments);
}
/**
 * Loads SVG file for each icon, extracts path strings `d="path-string"`,
 * and constructs map of icon name to array of path strings.
 * @param {array} files
 */


function _generateIconsSource() {
  _generateIconsSource = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    var options,
        ICONS_PATH,
        data,
        outPath,
        _args = arguments;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
            ICONS_PATH = (0, _utils.filterSvgFiles)(options.src);
            _context.next = 4;
            return buildPathsObject(ICONS_PATH);

          case 4:
            data = _context.sent;
            outPath = _path["default"].join(options.dist, "".concat(options.fontName, ".json"));
            _context.next = 8;
            return _fsExtra["default"].outputFile(outPath, "{".concat(data, "}"));

          case 8:
            return _context.abrupt("return", outPath);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _generateIconsSource.apply(this, arguments);
}

function buildPathsObject(_x) {
  return _buildPathsObject.apply(this, arguments);
}

function _buildPathsObject() {
  _buildPathsObject = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(files) {
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", Promise.all(files.map( /*#__PURE__*/function () {
              var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(filepath) {
                var name, svg, pathStrings;
                return _regenerator["default"].wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        name = _path["default"].basename(filepath, '.svg');
                        svg = _fsExtra["default"].readFileSync(filepath, 'utf-8');
                        _context2.next = 4;
                        return svgo.optimize(svg, {
                          path: filepath
                        }).then(function (_ref2) {
                          var data = _ref2.data;
                          return data.match(/ d="[^"]+"/g) || [];
                        }).then(function (paths) {
                          return paths.map(function (s) {
                            return s.slice(3);
                          });
                        });

                      case 4:
                        pathStrings = _context2.sent;
                        return _context2.abrupt("return", "\"".concat(name, "\": [").concat(pathStrings.join(',\n'), "]"));

                      case 6:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              }));

              return function (_x3) {
                return _ref.apply(this, arguments);
              };
            }())));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _buildPathsObject.apply(this, arguments);
}

var reactSource = function reactSource(name, source) {
  return "\nimport React from 'react';\n\nexport const ".concat(name, " = props => (\n  <svg viewBox=\"0 0 20 20\" {...props}>").concat(source, "</svg>\n);\n");
};
/**
 * Generate React Icon
 * <font-name>.json
 */


function generateReactIcons() {
  return _generateReactIcons.apply(this, arguments);
}

function _generateReactIcons() {
  _generateReactIcons = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4() {
    var options,
        ICONS_PATH,
        data,
        outPath,
        _args4 = arguments;
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            options = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};
            ICONS_PATH = (0, _utils.filterSvgFiles)(options.src);
            _context4.next = 4;
            return outputReactFile(ICONS_PATH, options);

          case 4:
            data = _context4.sent;
            outPath = _path["default"].join(options.dist, 'react', 'index.js');

            _fsExtra["default"].outputFileSync(outPath, data.join('\n'));

            return _context4.abrupt("return", outPath);

          case 8:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _generateReactIcons.apply(this, arguments);
}

var reactsvgo = new _svgo["default"]({
  plugins: [{
    convertShapeToPath: {
      convertArcs: true
    }
  }, {
    removeXMLNS: true
  }, // { removeDimensions: true, },
  {
    removeViewBox: false
  }, {
    removeEmptyAttrs: true
  } // { removeUnknownsAndDefaults: true },
  ]
});

var capitalizeEveryWord = function capitalizeEveryWord(str) {
  return str.replace(/-(\w)/g, function ($0, $1) {
    return $1.toUpperCase();
  }).replace(/^(\w)/g, function ($0, $1) {
    return $1.toUpperCase();
  });
};

function outputReactFile(_x2) {
  return _outputReactFile.apply(this, arguments);
}

function _outputReactFile() {
  _outputReactFile = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(files) {
    var options,
        _args6 = arguments;
    return _regenerator["default"].wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            options = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};
            return _context6.abrupt("return", Promise.all(files.map( /*#__PURE__*/function () {
              var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(filepath) {
                var name, svg, pathStrings, outDistPath;
                return _regenerator["default"].wrap(function _callee5$(_context5) {
                  while (1) {
                    switch (_context5.prev = _context5.next) {
                      case 0:
                        name = capitalizeEveryWord(_path["default"].basename(filepath, '.svg'));
                        svg = _fsExtra["default"].readFileSync(filepath, 'utf-8');
                        _context5.next = 4;
                        return reactsvgo.optimize(svg, {
                          path: filepath
                        }).then(function (_ref4) {
                          var data = _ref4.data;
                          return data.match(/ d="[^"]+"/g) || [];
                        }).then(function (paths) {
                          return paths.map(function (s) {
                            return s.slice(3);
                          });
                        });

                      case 4:
                        pathStrings = _context5.sent;
                        outDistPath = _path["default"].join(options.dist, 'react', "".concat(name, ".js"));
                        pathStrings = pathStrings.map(function (d, i) {
                          return "<path d=".concat(d, " fillRule=\"evenodd\" />");
                        });

                        _fsExtra["default"].outputFileSync(outDistPath, reactSource(name, pathStrings.join(',\n')));

                        return _context5.abrupt("return", "export * from './".concat(name, "';"));

                      case 9:
                      case "end":
                        return _context5.stop();
                    }
                  }
                }, _callee5);
              }));

              return function (_x4) {
                return _ref3.apply(this, arguments);
              };
            }())));

          case 2:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _outputReactFile.apply(this, arguments);
} 
//# sourceMappingURL=generate.js.map